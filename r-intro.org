#+title: R Basics in Literate programming
#+author: Dilip

Btw I highly recommend official manual to read: https://cran.r-project.org/doc/manuals/r-devel/R-intro.html
You can download it in Pdf or Epub or Html

* Starter Console
A good thing for emacs user is, you dont have to save these R codes to any file. You can just hover the block and press ~C-c '~ which runs ~org-edit-special~ and then you can simply view it as native R buffer, also you can press ~C-RET~ (Control+Enter) on any line and it will show console in another buffer, which is really cool and effective. This opens up great flexibility and endless integration with Emacs. Ultimately you will realize that, this is *match made in Heaven!*

** Basic Arithmetic
#+begin_src R :results output drawer :tangle ./codes/math.R
  5 + 6

  a <- 5
  b <- 6
  a + b
#+end_src

#+RESULTS:
:results:
[1] 11
[1] 11
:end:

** help(floor)
First, it is better to self study and know what the function does, so you have the power of hack-ability. Rather than following some YouTube video.
#+begin_src R :tangle ./codes/help.R
  ## Go through this in console or press C-c C-d
  ?floor

  ## or see examples via
  example(trunc)

#+end_src

#+begin_src R :results output drawer :tangle ./codes/round.R
  ## Lets get some results
  ceiling(2.1)

  trunc(20.622728)

  round(2.46)

  signif(2.8373, 4)

  ## Idk how lol, but this is *good behavior*
  round(.5 + -4:8)
  round(4.5)

#+end_src

#+RESULTS:
:results:
[1] 3
[1] 20
[1] 2
[1] 2.837
 [1] -4 -2 -2  0  0  2  2  4  4  6  6  8  8
[1] 4
:end:

** Vector
Let's jump into data types

#+begin_src R :tangle ./codes/vector.R
  ## First we set vector to a variable (scores)
  scores <- c(10.4, 5.6, 3.1, 6.4, 21.7) 

  ## This can also be assigned other way
  c(2.4, 17.2, 18.2, 5.7, -5.5) -> y

  ## Note that R is case-sensitive. Scores and scores are different
  ## So that means, there can be 64 variables (2**6)
  Scores

  ## Call correctly
  scores
  y

  ## print second element from the vector
  y[2]

  ## print range from first to third element
  y[1:3]

  ## Note: Index starts from 1 here. 0th index is just zero.
  ## unlike python, Index starts from 1
  y[0:1]
#+end_src


+ Vector Algebra
#+begin_src R :results output drawer :tangle ./codes/vector.R
  x = 7
  y = 2
  v <- 2*x + y + 1 
  v

  ## square root function
  ## see similarly ?sqrt, log, exp, sin, cos, tan, abs
  sqrt(v)
#+end_src

#+RESULTS:
:results:
[1] 17
[1] 4.123106
:end:

** Nile Data
Nile is a built-in dataset. It has 100 years of annual flow data, so lets use it.

#+begin_src R :results output drawer
  Nile # or print(Nile) is kinda same
#+end_src

#+RESULTS:
:results:
Time Series:
Start = 1871 
End = 1970 
Frequency = 1 
  [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110  994 1020
 [16]  960 1180  799  958 1140 1100 1210 1150 1250 1260 1220 1030 1100  774  840
 [31]  874  694  940  833  701  916  692 1020 1050  969  831  726  456  824  702
 [46] 1120 1100  832  764  821  768  845  864  862  698  845  744  796 1040  759
 [61]  781  865  845  944  984  897  822 1010  771  676  649  846  812  742  801
 [76] 1040  860  874  848  890  744  749  838 1050  918  986  797  923  975  815
 [91] 1020  906  901 1170  912  746  919  718  714  740
:end:

+ Let's see the mean flow of the data
#+begin_src R :results output drawer :tangle ./codes/nile.R
  mean(Nile)
  nileData <- mean(Nile)

  ## We could also use other operator (round,ceiling,floor...)
  round(mean(Nile))
  ceiling(nileData)
  length(Nile)
#+end_src

#+RESULTS:
:results:
[1] 919.35
[1] 919
[1] 920
[1] 100
:end:

+ Plot the Nile
  We can plot the data in any way. As an example I have histogram for this data.
#+begin_src R :results file
  hist(Nile)
#+end_src

** Sequence

Lets try a sequence of numbers. When I looked at ?seq, it actually looked confusing, so let's try it by practice.

#+begin_src R :results output drawer :tangle ./codes/seq.R
  seq(-5, 5, by=.2) -> s3 
  s4 <- seq(length=51, from=-5, by=.2)

  ## Repeat ?rep
  rep(1:4, 2)
  rep(1:4, each = 2)
  ## note the difference above

  rep(1:4, c(2,2,2,2))     # same as second
  rep(1:4, c(2,1,2,1))     # repeat for elements in vector
  rep(1:4, each = 2, length.out = 4)    # first 4 only
  rep(1:4, each = 2, length.out = 10)   # 8 integers plus two recycled 1's (seems like loop)
  rep(1:4, each = 2, times = 3)         # length 24, 3 complete replications
#+end_src

#+RESULTS:
:results:
[1] 1 2 3 4 1 2 3 4
[1] 1 1 2 2 3 3 4 4
[1] 1 1 2 2 3 3 4 4
[1] 1 1 2 3 3 4
[1] 1 1 2 2
 [1] 1 1 2 2 3 3 4 4 1 1
 [1] 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4
:end:

** Logical vectors
Mostly used for /conditions/. Note: Avoid using ~T~ and ~F~, instead use ~TRUE~ and ~FALSE~.

#+begin_quote
The logical operators are <, <=, >, >=, == for exact equality and != for inequality. In addition if c1 and c2 are logical expressions, then c1 & c2 is their intersection (“and”), c1 | c2 is their union (“or”), and !c1 is the negation of c1. 
#+end_quote

#+begin_src R :results output drawer :tangle ./codes/logicVector.R
  temp = 22

  temp >= 22
  temp > 21
  temp != 22.5
  !temp == -22

  ## Not Available
  dump <- c(5:13,NA)
  ## Above one defines a vector from 5 to 13
  ## rest all index considered to be NA
  dump
  dump[1222]
  is.na(dump[1234])
  is.na(dump)
  ## is. function is to check and give booleon whether it is TRUE or FALSE

  ## Missing values
  ## You saw NA above.
  0/0
  Inf - Inf

  ## What is this NaN? (Not a Number)
  ## As expected they are not defined

  is.na(0/0)
  is.nan(Inf-Inf)
#+end_src

#+RESULTS:
:results:
[1] TRUE
[1] TRUE
[1] TRUE
[1] TRUE
 [1]  5  6  7  8  9 10 11 12 13 NA
[1] NA
[1] TRUE
:end:


** Object Types

| Vectors     | Simple object with no attr                                           |
| Matrix      | 2 dimensional (rows+col)                                             |
| Array       | 3 dimensional                                                        |
| Factors     | Categorical ways                                                     |
| List        | Complex and generally better to use                                  |
| Data frames | Like Data matrices where columns can be different (num, Categorical) |

